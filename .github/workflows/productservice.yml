name: Product-Service
on:
  workflow_call:
    inputs:
      CI_ENV:
        required: true
        type: string
      CONTENTFUL_ENVIRONMENT:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true
      AWS_SESSION_TOKEN:
        required: true
      REGISTRY:
        required: true
      ECR_REPOSITORY:
        required: true          
      SONAR_TOKEN:
        required: true
      TOKEN_RELEASE:
        required: true   

env:
  CODE_DIR: ./products-service
#  ECR_REPOSITORY: proyecto-ort-repo
#  AWS_REGION: us-east-1
#  EKS_CLUSTER: project-ort-eks

jobs:
  Analysis:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.CODE_DIR }}
    steps:
      - name: Code checkout 
        uses: actions/checkout@v4
        with:
          fetch-depth: 3
      - name: Maven test 
        run: mvn test 

      - name: Checkstyle
        run: mvn checkstyle:checkstyle 

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: '11'
   
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
              -Dsonar.projectKey=CAScompany_project-Product-Service
              -Dsonar.organization=cascompany
              -Dsonar.java.binaries=**/target/test-classes
              -Dsonar.sources=.
              -Dsonar.junit.reportsPath=target/surefire-reports/
              -Dsonar.junit.reportsPath=target/checckstyle-result.xml
              -Dsonar.jacoco.reportsPathtarjet/jacoco.exec
              -Dsonar.java.checkstyle.reportPath=target/checkstyle-result.xml
              -Dsonar.exclusions=**/Dockerfile
 
      - name: Revisar archivos 
        run: tree       
      
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
            scanMetadataReportFile: ./.scannerwork/report-task.txt
        # Force to fail step after specific time. $GITHUB_WORKSPACE
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  FUNTIONAL_TESTING:
    needs:  Analysis
    runs-on: ubuntu-latest
    defaults:
        run:
            working-directory: ${{ env.CODE_DIR }}
    steps:
    - name: Code checkout 
      uses: actions/checkout@v4
          
    - name: test maven
      run: mvn clean test install
                
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin' 
        java-version: '11'
          
    - name: Correr App
      run: mvn spring-boot:run & sleep 4
            
    - name:  Install Node.js and npm
      uses: actions/setup-node@v4
      with:
            node-version: '20'
          
    - name: Instalar Newman
      run: |
            npm install -g newman@latest
            npm install -g newman-reporter-htmlextra
          
    - name: Ejecutar pruebas funcionales con Newman
      run: |
            newman run .././.github/Postman/postman_test.json -r cli,htmlextra --reporter-htmlextra-export testArtifacts/htmlreport.html
    - name: Revisar archivos 
      run: tree
                  
    - name: Almacenar reporte como artefacto
      uses: actions/upload-artifact@v3
      with:
        name: reporte-postman-paymant-service-${{ inputs.CI_ENV }}
        path: ./products-service/testArtifacts

    - name: Detener la app
      run: |
          PID=$(ps aux | grep 'spring-boot:run' | grep -v grep | awk '{print $2}')
          if [ -n "$PID" ]; then
              echo "Stopping Spring Boot App with PID $PID"
              kill -9 $PID
          else
              echo "Spring Boot App not running."
          fi

  Release:
    needs:  FUNTIONAL_TESTING
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.CODE_DIR }}
    steps:
      - name: Code checkout 
        uses: actions/checkout@v4
      - name: Build JAR
        run: mvn install -B

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_RELEASE }}
        with:
          tag_name: v${{github.run_number}}-${{ inputs.CI_ENV }}
          release_name: product-service-${{ inputs.CI_ENV }}
          body: product-service v${{github.run_number}}
          draft: false
          prerelease: false 
        
      - name: Upload JAR to Release          
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_RELEASE }}
  
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./products-service/target/products-service-example-0.0.1-SNAPSHOT.jar
          asset_name: products-service-${{ inputs.CI_ENV }}.jar
          asset_content_type: application/java-archive

  BUILD_AND_PUBLISH:
              needs:  Release
              runs-on: ubuntu-latest
              defaults:
                run:
                  working-directory: ${{ env.CODE_DIR }}
              steps:
              - name: Code checkout 
                uses: actions/checkout@v4
          
              - name: Setup AWS creds
                uses: aws-actions/configure-aws-credentials@v4
                with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
                  aws-region: ${{ secrets.AWS_REGION }}
##
              - name: Upload image to ECR
                uses: appleboy/docker-ecr-action@master        
                with:
                  registry: ${{ secrets.REGISTRY }}
                  repo: ${{ secrets.ECR_REPOSITORY }}
                  tags: product-service-${{ inputs.CI_ENV }}.v${{ github.run_number }}
                  daemon_off: false
                  dockerfile: ./Dockerfile
                  context: ./

